//------------------- MODULES -----------------------
const mongoose = require("mongoose");
const slugify = require('slugify');
// Le module slugify est une biblioth√®que qui permet de convertir une cha√Æne de caract√®res en une version simplifi√©e et adapt√©e √† une URL. Par exemple, il peut convertir une cha√Æne comme "Hello World" en "hello-world", ce qui est plus adapt√© pour une utilisation dans une URL.
// EX: let title = "Hello World"; let slug = slugify(title); console.log(slug); // Affiche : "hello-world"
// Dans cet exemple, le module slugify est utilis√© pour convertir la cha√Æne "Hello World" en un slug "hello-world" √† l'aide de la fonction slugify().
// const User = require('./userModel')

console.log('HOLI MODEL')
//------------------- MODEL SCHEMA HOLI -----------------------
const holiSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: [true, "A holi must have a name"],
      unique: true,
      trim: true,
      maxlength: [40, "A holi must have less or equal then 40 characters"],
      minlength: [10, "A holi must have more or equal then 10 characters"],
    },
    slug: String, //$ CHAMP SLUG
    duration: {
      type: Number,
      required: [true, "A holi must have a duration"],
    },
    maxGroupSize: {
      type: Number,
      required: [true, "A holi must have a droup size"],
    },
    difficulty: {
      type: String,
      required: [true, "A holi must have a difficulty"],
      enum: {
        values: ["easy", "medium", "difficult"],
        message: "Difficulty is either: easy, medium, or difficult",
      },
    },
    ratingsAverage: {
      type: Number,
      default: 4.5,
      min: [1, "Rating must be above 1.0"],
      max: [5, "Rating must be below 5.0"],
      set: (val) => Math.round(val * 10) / 10, //? set => callback fonction va √™tre ex√©cut√© chaque fois qu'il y a une nouvelle valeur pour "ratingAverage".
      // val => valeur actuel
      // Math.round => val(4.6666) = 5 ‚õî le probleme de Math.round c'est qu'il arrondit le nombre en ENTIER alors que je ne veux pas l'arrondir autanT mais plutot 4.6666 a 4,7 ‚úÖ,
      // Je dois alors le multiplier "val" par 10 et ensuite le Math.round fait sont travail et arrondit, et ensuite encore diviser son resultat. EX: (4.66666 * 10 = 46,6666) =>  Math.round = 47 => 47/10 => "4,7" ‚úÖ‚úÖ‚úÖ
    },
    ratingsQuantity: {
      type: Number,
      default: 0,
    },
    price: {
      type: Number,
      required: [true, "A holi must have a price"],
    },
    priceDiscount: Number,
    summary: {
      type: String,
      trim: true,
      required: [true, "A holi must have a description"],
    },
    description: {
      type: String,
      trim: true,
    },
    imageCover: {
      type: String,
      required: [true, "A holi must have a cover image"],
    },
    images: [
      {
        type: String,
      },
    ],
    createAt: {
      type: Date,
      default: Date.now(),
      select: false,
    },
    startDates: [Date],
    location: {
      type: { type: String },
      description: String,
      name: String,
      address: String,
    },

    coach: [
      // Ce champ sera un sous-document qui sert √† stocker juste la "r√©f√©rence" (les identifiants des utilisateurs) dans un tableau.
      // mongoose.Schema.ObjectId => cela signifie que j'attends √† ce qu'un type de chacun des √©l√©ments du tableau coach soit un "ID" MongoDB.
      {
        // D√©finition du type de sch√©ma, toujours un objet
        type: mongoose.Schema.ObjectId,
        ref: "User", // Le plus important, c'est de sp√©cifier la r√©f√©rence. C'est l√† que la magie op√®re en coulisse, car ici maintenant, on dit que la r√©f√©rence doit √™tre "utilisateur".
      },
    ],
  },
  {
    //* OBJECT OPTIONS SCHEMA
    //Cela ne fait que s'assurer que lorsque j'ai une propri√©t√© virtuelle, il s'agit essentiellement d'un champ qui n'est pas stock√© dans la base de donn√©es mais calcul√© √† l'aide d'une autre valeur. Je veux donc que cela apparaisse √©galement chaque fois qu'il y a une sortie.
    // Je definis ici que je souhaite utiliser les "propri√©t√©s virtuelles" dans mon sch√©ma
    toJSON: { virtuals: true }, // Chaque fois que les donn√©es sorte en tant que "JSON" =>  Je veux que "virtuals soit true" ce qui signifie que je veux que virtuel fasse partie du document sortant.
    toObject: { virtuals: true }, // pareil que JSON AUDESSUS
  }
);
holiSchema.index({ slug: 1 });

//* MONGOOSE MIDDLEWARE DOCUMENT (Est un middleware qui peut agir sur le document en cours de traitement )
//¬£ this => point vers le document actuel
//¬£ PRE MIDDLEWARE FUNCTION
//? .pre() => PRE MIDDLEWARE ou PRE HOOK => sera ex√©cuter avant qu'un √©venement actuel ne soit enregistr√© dans la base de donn√©es. √©venement => 'save'
//? .pre() s'ex√©cute donc avant et seulement sur les commande mongoose .save() et .create() utiliser dans les controllers
holiSchema.pre('save', function (next) {
  // cet function sera appel√© avant qu'un document ne soit enregistr√© dans la base de donn√©es
  //?üîçüîçüîçüîç console.log(this) // NE PAS OUBLIER QUE THIS EST LE "DOCUMENT TRAITER" PAR LA REQUETE POST CREATE TOUR
  // Dans un middleware save le mot-cl√© "this" va pointer vers le document en cours de traitement. C'est la raison pour laquelle on l'appelle un "middleware document". Parce que dans cette la fonction ou l'on ce trouve on a acc√®s aux documents qui est en cours de traitement, c'est √† dire le document qui est entrain d'√™tre save(enregistr√©).
  this.slug = slugify(this.name, { lower: true });
  //? je definit une nouvelle propriete sur "this" avec ".slug" en utilisant slugify() pour creer un CHAMP "SLUG" avec la valeur de this.name et une option lowercase pour convertir la valeur en minuscule.
  //¬£ Il ne faut pas oublier √† la fin de rajouter le champ "slug" dans le sch√©ma holiSchema.
  //Si j'oublie le next() je reste bloqu√© √† l'int√©rieur du middleware et rien ne se passera .
  next();
});

//-------------- MONGOOSE VIRTUAL POPULATE ----------------------

holiSchema.virtual("reviews", {
  // J'appelle ma fonction "reviews"
  ref: "Review", // cette fonction virtuelle sera li√©e au mod√®le 'Review' ce qui permettra de r√©cup√©rer des donn√©es du mod√®le 'Review'.
  foreignField: "holi",
  localField: "_id",
});

//------------------- MONGOOSE QUERY MIDDLEWARE   ----------------
// MONGOOSE MIDDLEWARE (Est un middleware qui peut agir sur le document en cours de traitement )

// J'utilise un middleware de requ√™te pour ex√©cuter automatiquement ce code √† chaque fois qu'une requ√™te est effectu√©e. Cela m'√©vite d'avoir √† r√©p√©ter ce code dans plusieurs contr√¥leurs.
// `/^find/` j'utilise une expression r√©guli√®re pour cibler toutes les requ√™tes qui commencent par "find".
// L'utilisation de `this` fait r√©f√©rence √† la requ√™te actuellement en cours.
// Ensuite, j'utilise `populate` pour remplir le champ 'coach' avec les donn√©es des coachs. L'option `select` est utilis√©e pour exclure les champs '__v' et 'passwordChangeAt' des r√©sultats, car je ne souhaite pas les afficher.

holiSchema.pre(/^find/, function (next) {
  this.populate({
    path: "coach",
    select: "-__v -passwordChangedAt", // je ne souhaite pas afficher les champs: "__v" et "passwordChangeAt"
  });
  next();
});

//------------------- CLOSE SCHEMA & ACTIVE MODEL ----------------
const Holi = mongoose.model("Holi", holiSchema);
module.exports = Holi;
